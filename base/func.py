'================================Функции===================================='
#Функия - именное блок кода который может принимать аргменты и возвращать результат
# def my_sum (x, y)): #x , y параметры  
#     a = x + y
#     return a 

# res = my_sum(5,10) #5 ,10 аргументы 
# print(res)

#напишите функцию которая печатает то что мы передеаем ы нее

# def my_func(num):
#     print(num)

# my_func(10)

# def hello_world():
#     print('Hello')

# hello_world()
# hello_world()
# hello_world()
# msg = hello_world()
# print(msg)


# def my_len(a):
#     for i in a:
#         count = count + 1
#     return count

# print (my_len([1,2,3,4,'hi', 0]))

# print(len('hello world'))

'функции соблюдают принцип DRY(dont repeat yourself)'

'==================================Аргументы и параметры=================================='
'Параметры это переменные внутри функции параметры мы не создаем когда создаем функции'
# def function(a,b): #a,b это параметры
#     print(a,b)

#1. Обязательные
#2. Не обязательные
    #2.1 c дефолтом(со значением по умолчанию)
    #2.2 *args(все позиционные аргументы которые не попали в обязательные и с дефолтом)
    #2.3 **kwargs(все лишние именнованные аргументы)
'========================================Виды аргументов============================================'
#1. позиционные(по позиции)
#2. именованные(по названию(параметр = значение))

# def func(num1, num2):
#     print(num1 + num2)

# func(num1 = 10, num2 = 20) #именованый

# def func(a,b*args, **kwargs):
#     print(a)
#     print(b)
#     print(*args) #tuple
#     print(kwargs)

# func(5, 1, (10,4,2,5,1),hello = 'hi', abc = '1212123')

# одна звездочка в пайтон это распаковка print(*[1,2,3]) ---> 1 2 3



# напишите функцию div. эта функция должна делить однл число на другое сделайте проверку деления на ноль

def div(a, b):
    if b == 0:
        return "Ошибка: деление на ноль!"
    else:
        return a / b
num1 = 10
num2 = 2
result = div(num1, num2)
print(result)
num3 = 10
num4 = 0
result = div(num3, num4)
print(result)